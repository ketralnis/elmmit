from functools import partial
import argparse

from flask import Flask
from flask import Response
from flask import current_app
from flask import g
from flask import json
from flask import request

from . import api
from . import api_docs
from . import db
from . import models
from . import utils


app = Flask(__name__)


@app.route('/docs')
def docs():
    return Response(api_docs.make_docs(api.api_routes),
                    mimetype='text/plain')


def routed_fn(route):
    conn = db.connect_db(current_app.config['db_path'])

    params = {}
    errors = []
    param_source = request.form if request.method == 'POST' else request.args
    for field_name, field_desc in route.fields.items():
        if field_name not in param_source and field_desc.required:
            errors.append("missing %s" % (field_name,))
        elif field_name not in param_source:
            params[field_name] = field_desc.default
        else:
            params[field_name] = field_desc.type(param_source[field_name])

    if errors:
        return Response(json.dumps({'errors': errors}),
                        mimetype='application/json',
                        status=400)

    try:
        ret = route.db_call(conn, **params)
        ret_json = ret.to_json()
    except Exception as ex:
        errors.append(repr(ex))

    if errors:
        return Response(json.dumps({'errors': errors}),
                        mimetype='application/json',
                        status=500)

    return Response(json.dumps(ret_json),
                    mimetype='application/json')


# add all of the autogenerated API endpoints
for path, route in api.api_routes.items():
    app.add_url_rule(path,
                     route.basename,
                     partial(routed_fn, route),
                     methods=[route.method])


@app.route('/', methods=['GET', 'OPTIONS'])
def slash():
    return Response(
        """<html>
            <body>
                <p>
                    You probably meant to go to
                    <a href="http://localhost:8000">http://localhost:8000</a>
                </p>
                <p>
                    But you can see the API docs at
                    <a href="/docs">/docs</a> if you want
                </p>
            </body>
        </html>""",
        mimetype="text/html")


@app.after_request
def add_cors(response):
    # we run the python server on one port and the elm reactor on a different
    # port, so we need to allow cross-origin requests. note! in a real
    # application this exposes you to all sorts of bad juujuu
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Methods'] = 'GET, POST'
    return response


def server(db_path, port, debug=True, host='0.0.0.0'):
    # make sure we can connect to the DB before we start anything, since every
    # request will try to connect individually and we'd rather fail before that
    conn = db.connect_db(db_path)
    assert list(conn.execute('select 1'))
    del conn

    with app.app_context():
        app.config['db_path'] = db_path

    app.run(port=port, debug=debug, host=host)
